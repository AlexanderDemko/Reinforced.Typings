//     This code was generated by a Reinforced.Typings tool. 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
var Reinforced;
(function (Reinforced) {
    var Typings;
    (function (Typings) {
        var Samples;
        (function (Samples) {
            var Difficult;
            (function (Difficult) {
                var CodeGenerators;
                (function (CodeGenerators) {
                    var Controllers;
                    (function (Controllers) {
                        var JQueryController = (function () {
                            function JQueryController() {
                            }
                            /** Wrapper method for call SimpleIntMethod of JQueryController */
                            JQueryController.SimpleIntMethod = function (loadingPlaceholderSelector, disableElement) {
                                if (loadingPlaceholderSelector === void 0) { loadingPlaceholderSelector = ''; }
                                if (disableElement === void 0) { disableElement = ''; }
                                return QueryController.query('/JQuery/SimpleIntMethod', {}, loadingPlaceholderSelector, disableElement);
                            };
                            /** Wrapper method for call MethodWithParameters of JQueryController */
                            JQueryController.MethodWithParameters = function (num, s, boolValue, loadingPlaceholderSelector, disableElement) {
                                if (loadingPlaceholderSelector === void 0) { loadingPlaceholderSelector = ''; }
                                if (disableElement === void 0) { disableElement = ''; }
                                return QueryController.query('/JQuery/MethodWithParameters', { 'num': num, 's': s, 'boolValue': boolValue }, loadingPlaceholderSelector, disableElement);
                            };
                            /** Wrapper method for call ReturningObject of JQueryController */
                            JQueryController.ReturningObject = function (loadingPlaceholderSelector, disableElement) {
                                if (loadingPlaceholderSelector === void 0) { loadingPlaceholderSelector = ''; }
                                if (disableElement === void 0) { disableElement = ''; }
                                return QueryController.query('/JQuery/ReturningObject', {}, loadingPlaceholderSelector, disableElement);
                            };
                            /** Wrapper method for call ReturningObjectWithParameters of JQueryController */
                            JQueryController.ReturningObjectWithParameters = function (echo, loadingPlaceholderSelector, disableElement) {
                                if (loadingPlaceholderSelector === void 0) { loadingPlaceholderSelector = ''; }
                                if (disableElement === void 0) { disableElement = ''; }
                                return QueryController.query('/JQuery/ReturningObjectWithParameters', { 'echo': echo }, loadingPlaceholderSelector, disableElement);
                            };
                            /** Wrapper method for call VoidMethodWithParameters of JQueryController */
                            JQueryController.VoidMethodWithParameters = function (model, loadingPlaceholderSelector, disableElement) {
                                if (loadingPlaceholderSelector === void 0) { loadingPlaceholderSelector = ''; }
                                if (disableElement === void 0) { disableElement = ''; }
                                return QueryController.query('/JQuery/VoidMethodWithParameters', { 'model': model }, loadingPlaceholderSelector, disableElement);
                            };
                            return JQueryController;
                        })();
                        Controllers.JQueryController = JQueryController;
                        app.factory('Api.AngularController', ['$http', function ($http) { return new AngularController($http); }]);
                        /** Result of AngularControllerGenerator activity */
                        var AngularController = (function () {
                            function AngularController($http) {
                                this.http = $http;
                            }
                            AngularController.prototype.SimpleIntMethod = function () {
                                var params = {};
                                return this.http.post('/Angular/SimpleIntMethod', params)
                                    .then(function (response) { response.data['requestParams'] = params; return response.data; });
                            };
                            AngularController.prototype.MethodWithParameters = function (num, s, boolValue) {
                                var params = { 'num': num, 's': s, 'boolValue': boolValue };
                                return this.http.post('/Angular/MethodWithParameters', params)
                                    .then(function (response) { response.data['requestParams'] = params; return response.data; });
                            };
                            AngularController.prototype.ReturningObject = function () {
                                var params = {};
                                return this.http.post('/Angular/ReturningObject', params)
                                    .then(function (response) { response.data['requestParams'] = params; return response.data; });
                            };
                            AngularController.prototype.ReturningObjectWithParameters = function (echo) {
                                var params = { 'echo': echo };
                                return this.http.post('/Angular/ReturningObjectWithParameters', params)
                                    .then(function (response) { response.data['requestParams'] = params; return response.data; });
                            };
                            AngularController.prototype.VoidMethodWithParameters = function (model) {
                                var params = { 'model': model };
                                return this.http.post('/Angular/VoidMethodWithParameters', params)
                                    .then(function (response) { response.data['requestParams'] = params; return response.data; });
                            };
                            return AngularController;
                        })();
                        Controllers.AngularController = AngularController;
                    })(Controllers = CodeGenerators.Controllers || (CodeGenerators.Controllers = {}));
                })(CodeGenerators = Difficult.CodeGenerators || (Difficult.CodeGenerators = {}));
            })(Difficult = Samples.Difficult || (Samples.Difficult = {}));
        })(Samples = Typings.Samples || (Typings.Samples = {}));
    })(Typings = Reinforced.Typings || (Reinforced.Typings = {}));
})(Reinforced || (Reinforced = {}));
var Reinforced;
(function (Reinforced) {
    var Typings;
    (function (Typings) {
        var Samples;
        (function (Samples) {
            var Difficult;
            (function (Difficult) {
                var CodeGenerators;
                (function (CodeGenerators) {
                    var ReinforcedTypings;
                    (function (ReinforcedTypings) {
                        var MyCoolEnum = (function () {
                            function MyCoolEnum() {
                                this.One = "Value1";
                                this.Two = "Value1";
                                this.Three = "Value1";
                            }
                            return MyCoolEnum;
                        })();
                        ReinforcedTypings.MyCoolEnum = MyCoolEnum;
                    })(ReinforcedTypings = CodeGenerators.ReinforcedTypings || (CodeGenerators.ReinforcedTypings = {}));
                })(CodeGenerators = Difficult.CodeGenerators || (Difficult.CodeGenerators = {}));
            })(Difficult = Samples.Difficult || (Samples.Difficult = {}));
        })(Samples = Typings.Samples || (Typings.Samples = {}));
    })(Typings = Reinforced.Typings || (Reinforced.Typings = {}));
})(Reinforced || (Reinforced = {}));
//# sourceMappingURL=GeneratedTypings.js.map