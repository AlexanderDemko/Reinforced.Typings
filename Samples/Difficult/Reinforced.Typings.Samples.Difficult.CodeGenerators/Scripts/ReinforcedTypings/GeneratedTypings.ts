//     This code was generated by a Reinforced.Typings tool. 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.


module Reinforced.Typings.Samples.Difficult.CodeGenerators.Controllers {
	app.factory('Api.AngularController', ['$http', ($http: ng.IHttpService) => new AngularController($http)]);
	export class AngularController
	{
		constructor ($http: ng.IHttpService) { } 
		public SimpleIntMethod() : ng.IPromise<number>
		{
			
			var params = {  };
			return this.http.post('/Angular/SimpleIntMethod', params)
			    .then((response) => { response.data['requestParams'] = params; return response.data; });
			
		}
		public MethodWithParameters(num: number, s: string, boolValue: boolean) : ng.IPromise<string>
		{
			
			var params = { 'num': num, 's': s, 'boolValue': boolValue };
			return this.http.post('/Angular/MethodWithParameters', params)
			    .then((response) => { response.data['requestParams'] = params; return response.data; });
			
		}
		public ReturningObject() : ng.IPromise<Reinforced.Typings.Samples.Difficult.CodeGenerators.Models.ISampleResponseModel>
		{
			
			var params = {  };
			return this.http.post('/Angular/ReturningObject', params)
			    .then((response) => { response.data['requestParams'] = params; return response.data; });
			
		}
		public ReturningObjectWithParameters(echo: string) : ng.IPromise<Reinforced.Typings.Samples.Difficult.CodeGenerators.Models.ISampleResponseModel>
		{
			
			var params = { 'echo': echo };
			return this.http.post('/Angular/ReturningObjectWithParameters', params)
			    .then((response) => { response.data['requestParams'] = params; return response.data; });
			
		}
		public VoidMethodWithParameters(model: Reinforced.Typings.Samples.Difficult.CodeGenerators.Models.ISampleResponseModel) : ng.IPromise<any>
		{
			
			var params = { 'model': model };
			return this.http.post('/Angular/VoidMethodWithParameters', params)
			    .then((response) => { response.data['requestParams'] = params; return response.data; });
			
		}
		private http: ng.IHttpService;
	}
	export class JQueryController
	{
		/** Wrapper method for call SimpleIntMethod of JQueryController */
		public static SimpleIntMethod(loadingPlaceholderSelector: string = '', disableElement: string = '') : JQueryPromise<number>
		{
			return QueryController.query<number>(
			        '/JQuery/SimpleIntMethod', 
			        {  }, 
			        loadingPlaceholderSelector,
			        disableElement
			    );
		}
		/** Wrapper method for call MethodWithParameters of JQueryController */
		public static MethodWithParameters(num: number, s: string, boolValue: boolean, loadingPlaceholderSelector: string = '', disableElement: string = '') : JQueryPromise<string>
		{
			return QueryController.query<string>(
			        '/JQuery/MethodWithParameters', 
			        { 'num': num, 's': s, 'boolValue': boolValue }, 
			        loadingPlaceholderSelector,
			        disableElement
			    );
		}
		/** Wrapper method for call ReturningObject of JQueryController */
		public static ReturningObject(loadingPlaceholderSelector: string = '', disableElement: string = '') : JQueryPromise<Reinforced.Typings.Samples.Difficult.CodeGenerators.Models.ISampleResponseModel>
		{
			return QueryController.query<Reinforced.Typings.Samples.Difficult.CodeGenerators.Models.ISampleResponseModel>(
			        '/JQuery/ReturningObject', 
			        {  }, 
			        loadingPlaceholderSelector,
			        disableElement
			    );
		}
		/** Wrapper method for call ReturningObjectWithParameters of JQueryController */
		public static ReturningObjectWithParameters(echo: string, loadingPlaceholderSelector: string = '', disableElement: string = '') : JQueryPromise<Reinforced.Typings.Samples.Difficult.CodeGenerators.Models.ISampleResponseModel>
		{
			return QueryController.query<Reinforced.Typings.Samples.Difficult.CodeGenerators.Models.ISampleResponseModel>(
			        '/JQuery/ReturningObjectWithParameters', 
			        { 'echo': echo }, 
			        loadingPlaceholderSelector,
			        disableElement
			    );
		}
		/** Wrapper method for call VoidMethodWithParameters of JQueryController */
		public static VoidMethodWithParameters(model: Reinforced.Typings.Samples.Difficult.CodeGenerators.Models.ISampleResponseModel, loadingPlaceholderSelector: string = '', disableElement: string = '') : JQueryPromise<any>
		{
			return QueryController.query<any>(
			        '/JQuery/VoidMethodWithParameters', 
			        { 'model': model }, 
			        loadingPlaceholderSelector,
			        disableElement
			    );
		}
	}
}
module Reinforced.Typings.Samples.Difficult.CodeGenerators.Models {
	export interface ISampleResponseModel
	{
		Message: string;
		Success: boolean;
		CurrentTime: string;
	}
}
